# Terraform notes:

- terraform init -backend-config="variables\dev\backend.tfvars" -upgrade=true -input=false
- terraform plan -input=false -var-file="variables\dev\terraform.tfvars"
- terraform apply -auto-approve -input=false -var-file="variables\dev\terraform.tfvars"
- terraform destroy -auto-approve -input=false -var-file="variables\dev\terraform.tfvars"

# Notes:

    Image for frontend:
    - cloudacademydevops/frontend:v11 - https://hub.docker.com/r/cloudacademydevops/frontend
    Image API:
    - cloudacademydevops/api:v3 - https://hub.docker.com/r/cloudacademydevops/api/

# Problem with auth to cluster:
    https://repost.aws/knowledge-center/eks-api-server-unauthorized-error

    - aws iam list-users
    - aws sts get-caller-identity
    - aws sts get-caller-identity --profile default

    - aws eks update-kubeconfig --region eu-west-1 --name PoC-EKS-Cluster --profile default
    - kubectl config view --minify

    - eksctl get iamidentitymapping --cluster PoC-EKS-Cluster
    - kubectl describe configmap aws-auth -n kube-system

# Deployment:

1. kubectl create ns demo-eks-api
2. Set ns default:
    - kubectl config current-context
        - arn:aws:eks:eu-west-1:$ACCOUNT_NUMBER_AWS:cluster/PoC-EKS-Cluster
    - kubectl config set-context <your-context-name> --namespace=demo-eks-api
        - kubectl config set-context arn:aws:eks:eu-west-1:$ACCOUNT_NUMBER_AWS:cluster/PoC-EKS-Cluster --namespace=demo-eks-api

3. kubectl apply -f mongo-statefulset.yaml
4. kubectl apply -f mongo-service.yaml

5. Open mongoDB + Insert data to DB:
    - kubectl exec -it mongo-0 -- mongo

    rs.initiate();
    sleep(2000);
    rs.add("mongo-1.mongo:27017");
    sleep(2000);
    rs.add("mongo-2.mongo:27017");
    sleep(2000);
    cfg = rs.conf();
    cfg.members[0].host = "mongo-0.mongo:27017";
    rs.reconfig(cfg, {force: true});
    sleep(5000);

    use langdb;

    db.languages.insert({"name" : "csharp", "codedetail" : { "usecase" : "system, web, server-side", "rank" : 5, "compiled" : false, "homepage" : "https://dotnet.microsoft.com/learn/csharp", "download" : "https://dotnet.microsoft.com/download/", "votes" : 0}});
    db.languages.insert({"name" : "python", "codedetail" : { "usecase" : "system, web, server-side", "rank" : 3, "script" : false, "homepage" : "https://www.python.org/", "download" : "https://www.python.org/downloads/", "votes" : 0}});
    db.languages.insert({"name" : "javascript", "codedetail" : { "usecase" : "web, client-side", "rank" : 7, "script" : false, "homepage" : "https://en.wikipedia.org/wiki/JavaScript", "download" : "n/a", "votes" : 0}});
    db.languages.insert({"name" : "go", "codedetail" : { "usecase" : "system, web, server-side", "rank" : 12, "compiled" : true, "homepage" : "https://golang.org", "download" : "https://golang.org/dl/", "votes" : 0}});
    db.languages.insert({"name" : "java", "codedetail" : { "usecase" : "system, web, server-side", "rank" : 1, "compiled" : true, "homepage" : "https://www.java.com/en/", "download" : "https://www.java.com/en/download/", "votes" : 0}});
    db.languages.insert({"name" : "nodejs", "codedetail" : { "usecase" : "system, web, server-side", "rank" : 20, "script" : false, "homepage" : "https://nodejs.org/en/", "download" : "https://nodejs.org/en/download/", "votes" : 0}});

    db.languages.find().pretty();

6. kubectl apply -f mongo-secret.yaml
7. kubectl apply -f api-deployment.yaml
8. kubectl expose deploy api --name=api --type=LoadBalancer --port=80 --target-port=8080

    - kubectl get svc

    - Windows Powershell:
    $API_ELB_PUBLIC_FQDN = kubectl get svc api -ojsonpath="{.status.loadBalancer.ingress[0].hostname}"
    $API_ELB_PUBLIC_FQDN = "http://" + $API_ELB_PUBLIC_FQDN
    do {
        Start-Sleep -Seconds 2
        Write-Host "waiting for DNS to propagate..."
        $nslookupOutput = nslookup $API_ELB_PUBLIC_FQDN 2>&1
    } while ($nslookupOutput -match "can't find")

    Invoke-WebRequest -Uri ("http://" + $API_ELB_PUBLIC_FQDN + "/ok")

9. kubectl apply -f frontend-deployment.yaml
10. kubectl expose deploy frontend --name=frontend --type=LoadBalancer --port=80 --target-port=8080

    - kubectl get svc

    - Windows Powershell:
    $FRONTEND_ELB_PUBLIC_FQDN = kubectl get svc frontend -ojsonpath="{.status.loadBalancer.ingress[0].hostname}"

    do {
        Start-Sleep -Seconds 2
        Write-Host "waiting for DNS to propagate..."
        $nslookupOutput = nslookup $FRONTEND_ELB_PUBLIC_FQDN 2>&1
    } while ($nslookupOutput -match "can't find")

    Invoke-WebRequest -Uri ("http://" + $FRONTEND_ELB_PUBLIC_FQDN) -Method Head

    echo http://$FRONTEND_ELB_PUBLIC_FQDN